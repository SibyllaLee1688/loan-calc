package com.osa.loan.calc;

import com.osa.loan.calc.model.*;
import com.osa.loan.calc.service.*;

dialect  "java"

global TotalPayments totalPayments;
global Utils utils;

rule "1: Opłaty za mieszkanie."
no-loop true
salience 100
    when
        $person :Person()
        $bills : MonthlyBills(estate > 0) from $person.bills
    then
        totalPayments.addPayment($bills.getEstate());
end

rule "2: Koszty utrzymania."
no-loop true
salience 100
    when
        $person :Person()
        $bills : MonthlyBills(living > 0) from $person.bills
    then
        totalPayments.addPayment($bills.getLiving());
end

rule "3: Składki ubezpieczeniowe."
no-loop true
salience 100
    when
        $person :Person()
        $bills : MonthlyBills(insurance > 0) from $person.bills
    then
        totalPayments.addPayment($bills.getInsurance());
end

rule "4: Inne kredyty."
no-loop true
salience 100
    when
        $person :Person()
        $bills : MonthlyBills(otherLoans > 0) from $person.bills
    then
        totalPayments.addPayment($bills.getOtherLoans());
end

rule "5: Pozostałe koszta."
no-loop true
salience 100
    when
        $person :Person()
        $bills : MonthlyBills(others > 0) from $person.bills
    then
        totalPayments.addPayment($bills.getOthers());
end

rule "6: Klient pracujący"
no-loop true
salience 99
    when
        $person : Person(monthlySalary > 0)
        $results : Results(unemployed == true)
    then
        modify($results){ setUnemployed(false) };
end

rule "7: Klient bezrobotny"
no-loop true
salience 99
    when
        $person : Person(monthlySalary == 0)
        $results : Results(unemployed == false)
    then
        modify($results){ setUnemployed(true) };
end

rule "8: Małżonka pracująca"
no-loop true
salience 99
    when
        $person : Person(married == true, partnerMonthlySalary > 0)
        $results : Results(partnerUnemployed == true)
    then
        modify($results){ setPartnerUnemployed(false) };
end

rule "9: Małżonka bezrobotna"
no-loop true
salience 99
    when
        $person : Person(married == true, partnerMonthlySalary == 0)
        $results : Results(partnerUnemployed == false)
    then
        modify($results){ setPartnerUnemployed(true) };
end

rule "10: Klient nie wypłacalny"
no-loop true
salience 98
    when
        $person : Person(monthlySalary < bills.totalPayments)
        $results : Results(ableToPayBills == true)
    then
        modify($results){ setAbleToPayBills(false) };
end

rule "11: Klient wypłacalny"
no-loop true
salience 98
    when
        $person : Person(monthlySalary >= bills.totalPayments)
        $results : Results(ableToPayBills == false)
    then
        modify($results){ setAbleToPayBills(true) };
end

rule "12: Klient z małżonkiem nie wypłacalni"
no-loop true
salience 97
    when
        $person : Person(monthlySalary + partnerMonthlySalary < bills.totalPayments)
        $results : Results(ableToPayBills == true)
    then
        modify($results){ setAbleToPayBills(false) };
end

rule "13: Klient z małżonkiem wypłacalni"
no-loop true
salience 97
    when
        $person : Person(monthlySalary + partnerMonthlySalary >= bills.totalPayments)
        $results : Results(ableToPayBills == false)
    then
        modify($results){ setAbleToPayBills(true) };
end

rule "14: Klient nie jest w stanie sam opłacać rat"
no-loop true
salience 96
    when
        $person : Person(monthlySalary < (bills.totalPayments + loan.monthlyLoanInstallment))
        $loan : Loan(monthlyLoanInstallment > 0) from $person.loan
        $results : Results(ableToPayInstallments == true)
    then
        modify($results){ setAbleToPayInstallments(false) };
end

rule "15: Klient jest w stanie sam opłacać raty"
no-loop true
salience 96
    when
        $person : Person(monthlySalary >= (bills.totalPayments + loan.monthlyLoanInstallment))
        $loan : Loan(monthlyLoanInstallment > 0) from $person.loan
        $results : Results(ableToPayInstallments == false)
    then
        modify($results){ setAbleToPayInstallments(true) };
end

rule "16: Klient z małżonkiem nie jest w stanie opłacać rat"
no-loop true
salience 95
    when
        $person : Person(married == true, monthlySalary + partnerMonthlySalary < (bills.totalPayments + loan.monthlyLoanInstallment))
        $loan : Loan(monthlyLoanInstallment > 0) from $person.loan
        $results : Results(ableToPayInstallmentsWithPartner == true)
    then
        modify($results){ setAbleToPayInstallmentsWithPartner(false) };
end

rule "17: Klient z małżonkiem jest w stanie opłacać rat"
no-loop true
salience 95
    when
        $person : Person(married == true, monthlySalary + partnerMonthlySalary >= (bills.totalPayments + loan.monthlyLoanInstallment))
        $loan : Loan(monthlyLoanInstallment > 0) from $person.loan
        $results : Results(ableToPayInstallmentsWithPartner == false)
    then
        modify($results){ setAbleToPayInstallmentsWithPartner(true) };
end
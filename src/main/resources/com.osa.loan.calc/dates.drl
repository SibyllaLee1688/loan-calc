package com.osa.loan.calc;
import com.osa.loan.calc.model.*;
import java.util.List;
import java.time.LocalDate;

dialect  "java"

global Utils utils;

global Results results;

rule "15: Klient niepełnoletni"
    when
        $person : Person(utils.getAgeInYears(birthDay) < 18)
    then
        results.setOldEnough(false);
end

rule "16: Klient pełnoletni"
    when
        $person : Person(utils.getAgeInYears(birthDay) >= 18)
    then
        results.setOldEnough(false);
end

rule "17: Klient za stary"
    when
        $person : Person(man == true, utils.getAgeInYears(birthDay) >= utils.averageManAge)
    then
        results.setTooOld(true);
end

rule "18: Klientka za stara"
    when
        $person : Person(man == false, utils.getAgeInYears(birthDay) >= utils.averageWomanAge)
    then
        results.setTooOld(true);
end

rule "19: Klient nie za stary"
    when
        $person : Person(man == true, utils.getAgeInYears(birthDay) < utils.averageManAge)
    then
        results.setTooOld(false);
end

rule "20: Klientka nie za stara"
    when
        $person : Person(man == false, utils.getAgeInYears(birthDay) < utils.averageWomanAge)
    then
        results.setTooOld(false);
end

rule "21: Małżonka klienta za stara"
    when
        $person : Person(married == true, man == true, utils.getAgeInYears(partnerBirthDay) >= utils.averageWomanAge)
    then
        results.setTooOld(true);
end

rule "22: Małżonek klientki za stary"
    when
        $person : Person(married == true, man == false, utils.getAgeInYears(partnerBirthDay) >= utils.averageManAge)
    then
        results.setTooOld(true);
end

rule "23: Małżonka klienta nie za stara"
    when
        $person : Person(married == true, man == true, utils.getAgeInYears(partnerBirthDay) < utils.averageWomanAge)
    then
        results.setTooOld(false);
end

rule "24: Małżonek klientki nie za stary"
    when
        $person : Person(married == true, man == false, utils.getAgeInYears(partnerBirthDay) < utils.averageManAge)
    then
        results.setTooOld(false);
end

rule "25: Klient nie będzie z stanie spłacić wszystkich rat"
    when
        $loan : Loan(period > 0) from $person.loan
        $person : Person(utils.getNumberOfInstallmentsThatCouldBePaid(birthDay, man) < $loan.period)
    then
        results.setWillClientLiveLongEnough(false);
end

rule "26: Klient będzie w stanie spłacić wszystkie raty"
    when
        $loan : Loan(period > 0) from $person.loan
        $person : Person(utils.getNumberOfInstallmentsThatCouldBePaid(birthDay, man) >= $loan.period)
    then
        results.setWillClientLiveLongEnough(true);
end

rule "27: Małżoka klienta nie będzie w stanie spłacić wszystkie raty"
    when
        $loan : Loan(period > 0) from $person.loan
        $person : Person(utils.getNumberOfInstallmentsThatCouldBePaid(partnerBirthDay, !man) < $loan.period)
    then
        results.setWillClientsPartnerLiveLongEnough(false);
end

rule "28: Małżoka klienta będzie w stanie spłacić wszystkie raty"
    when
        $loan : Loan(period > 0) from $person.loan
        $person : Person(utils.getNumberOfInstallmentsThatCouldBePaid(partnerBirthDay, !man) >= $loan.period)
    then
        results.setWillClientsPartnerLiveLongEnough(true);
end

rule "29: Przynajmniej jedno z dzieci mogło kontynuować spłacania kredytu bezpośredio po śmierci kilenta"
    when
        $person : Person(children > 0)
        $childBirthday : LocalDate(utils.childWillBeAbleToCarryOn($person.birthDay, $person.man, $childBirthday) == true) from $person.childrenBirthDays
    then
        results.setChildCanCarryOnAfterClient(true);
end

rule "29: Przynajmniej jedno z dzieci mogło kontynuować spłacania kredytu bezpośredio po śmierci małżonki kilenta"
    when
        $person : Person(children > 0)
        $childBirthday : LocalDate(utils.childWillBeAbleToCarryOn($person.partnerBirthDay, !$person.man, $childBirthday) == true) from $person.childrenBirthDays
    then
        results.setChildCanCarryOnAfterPartner(true);
end